// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_LOCAL_HOST_URL")
}

model Address {
  id String @id @default(uuid())
  street String @db.VarChar(30)
  number Int
  district String @db.VarChar(30)
  city String @db.VarChar(20)
  state String @db.VarChar(20)
  zipCode String @map("zip_code") @db.VarChar(15)
  description String @db.VarChar(20)

  UserAddress User[]
  RestaurantAddress Restaurant[]

  @@map("addresses")
}

model User {
  id String @id @default(uuid())
  firstName String @map("first_name") @db.VarChar(20)
  lastName String @map("last_name") @db.VarChar(30)
  password String @db.VarChar(30)
  phoneNumber String @map("phone_number") @db.VarChar(15)
  address Address @relation(fields: [addressId], references: [id])
  addressId String @map("address_id") @db.VarChar(20)
  role String @db.VarChar(10) @default("user")

  UserOrders Order[]

  @@map("users")
}

model Restaurant {
  id String @id @default(uuid())
  name String @db.VarChar(20)
  cnpj String @map("CNPJ") @db.VarChar(15)
  email String @db.VarChar(25)
  phoneNumber String @map("phone_number") @db.VarChar(15)
  address Address @relation(fields: [addressId], references: [id])
  addressId String @db.VarChar(20)

  RestaurantCategories RestaurantCategories[]
  RestaurantMenu Menu[]
  RestaurantOrders Order[]

  @@map("restaurants")
}

model RestaurantCategory {
  id Int @id @default(autoincrement())
  category String @db.VarChar(20)

  Category RestaurantCategories[]  

  @@map("restaurant_category")
}

model RestaurantCategories {
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String @map("restaurant_id") @db.VarChar(30)
  category RestaurantCategory @relation(fields: [categoryId], references: [id])
  categoryId Int @map("category_id")

  @@id([restaurantId, categoryId])

  @@map("restaurant_categories")
}

model Menu {
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String @map("restaurant_id") @db.VarChar(30)
  product Product @relation(fields: [productId], references: [id])
  productId String @map("product_id") @db.VarChar(30)

  @@id([restaurantId, productId])
  @@map("menus")
}

model Product {
  id String @id @default(uuid())
  name String @db.VarChar(30)
  price Float
  category ProductCategories @relation(fields: [categoryId], references: [id])
  categoryId Int @map("category_id")

  MenuProducts Menu[]
  OrderProducts OrderProduct[]
  @@map("products")
}

model ProductCategories {
  id Int @id @default(autoincrement())
  category ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int @map("category_id")

  ProductCategories Product[]

  @@map("product_categories")
}

model ProductCategory {
  id Int @id @default(autoincrement())
  name String

  ProductCategory ProductCategories[] 

  @@map("product_category")
}

model Order {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.VarChar(30)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String @map("restaurant_id") @db.VarChar(30)
  status String @db.VarChar(15)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @default(now())

  OrderProducts OrderProduct[]

  @@map("orders")  
}

model OrderProduct {
  order Order @relation(fields: [orderId], references: [id])
  orderId String @map("order_id") @db.VarChar(30)
  product Product @relation(fields: [productId], references: [id])
  productId String @map("product_id")  @db.VarChar(30)
  quantity Int
  totalPrice Float

  @@id([orderId, productId])

  @@map("order_products")

}



